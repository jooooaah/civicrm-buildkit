#!/bin/bash

RUN_BKNIX_HOMER_IMAGES="$HOME/images"
RUN_BKNIX_CLEANUP_FILES=()
RUN_BKNIX_CLEANUP_FUNCS=()
trap run_bknix_cleanup EXIT

function run_bknix_help() {
  echo "usage: run-bknix-job [--mock] [--loaded] <PROFILE> [<JOB_NAME>]"
  echo
  echo "example: run-bknix-job min CiviRM-Core-Matrix"
  echo "example: run-bknix-job --mock min CiviRM-Core-Matrix"
  echo "example: run-bknix-job min"
  echo
  echo "tip: If <JOB_NAME> is omitted, and if you execute within a real Jenkins"
  echo "environment, then it will use the active \$JOB_NAME."
  echo ""
  echo "tip: If <JOB_NAME> is an HTTPS URL, then it will fetch and run the"
  echo "script. This is useful if you want to configure Jenkins to temporarily"
  echo "use a WIP script."
  echo
  echo "tip: If you have already loaded the required bknix profile, then pass"
  echo "option --loaded to prevent double-loading."
}

function run_bknix_fatal() {
  echo "$@" 1>&2
  echo 1>&2
  run_bknix_help 1>&2
  exit 1
}

function run_bknix_mktemp() {
  local tmpfile="/tmp/run-bknix-$USER-"$(date '+%Y-%m-%d-%H-%M'-$RANDOM$RANDOM)
  touch "$tmpfile"
  chmod 600 "$tmpfile"
  echo "$tmpfile"
}

function run_bknix_cleanup() {
  for func in "${RUN_BKNIX_CLEANUP_FUNCS[@]}" ; do
    #echo >&2 "[run-bknix-job: cleanup] $func"
    $func
  done
  for file in "${RUN_BKNIX_CLEANUP_FILES[@]}" ; do
    #echo >&2 "[run-bknix-job: cleanup] $file"
    if [ -e "$file" ]; then
      rm -f "$file"
    fi
  done
}

function run_bknix_mock() {
  echo "Using mock Jenkins environment"
  export EXECUTOR_NUMBER=0
  export BUILD_NUMBER=123
  export WORKSPACE="$HOME/tmp/mock-workspace"
  if [ ! -d "$WORKSPACE" ]; then
    mkdir -p "$WORKSPACE"
  fi
  cd "$WORKSPACE"
}

function run_bknix_main() {
  if [ -z "$BKNIX_JOBS" ]; then
    BKNIX_JOBS="/opt/buildkit/src/jobs"
  fi
  if [ ! -r "$BKNIX_JOBS/common.sh" ]; then
    run_bknix_fatal "File $BKNIX_JOBS/common.sh is not readable."
  fi
  export BKNIX_JOBS

  IS_MOCK_JENKINS=
  LOADED_BKPROF=
  while [[ $# -gt 0 ]]; do
    key="$1"

    case $key in
      --mock)
        IS_MOCK_JENKINS=1
        shift
        ;;
      --loaded)
        LOADED_BKPROF=1
        shift
        ;;
      *)
        break
        ;;
    esac
  done

  if [ $# -lt 1 ]; then
    run_bknix_help
    exit 1
  fi

  case "$1" in
    old|min|dfl|max|edge) BKPROF="$1" ; ;;
    *) run_bknix_fatal "Missing or invalid PROFILE" ; ;;
  esac
  export BKPROF

  if [ -n "$LOADED_BKPROF" ]; then
    LOADED_BKPROF="$BKPROF"
  fi

  if [ -n "$IS_MOCK_JENKINS" ]; then
    run_bknix_mock
  fi

  if [ -e /etc/bknix-ci/is-runner -a "$USER" != "homer" ]; then
    if [ -z "$JOB_NAME" ]; then
      export JOB_NAME="$2"
    fi
    "$BKNIX_JOBS/homerdo-task.sh" all
    return
  fi

  ## JOB_NAME can be complicated (when using matrix jobs). We want a trimmed-down name.
  BKNIX_JOB_NAME="$2"
  if [ -z "$BKNIX_JOB_NAME" ]; then
    BKNIX_JOB_NAME="$JOB_NAME"
  fi
  case "$BKNIX_JOB_NAME" in
    https:*)
      BKNIX_JOB_URL="$BKNIX_JOB_NAME"
      BKNIX_JOB_NAME=$(basename "$BKNIX_JOB_URL")
      BKNIX_JOB_SCRIPT=$(run_bknix_mktemp)
      RUN_BKNIX_CLEANUP_FILES+=("$BKNIX_JOB_SCRIPT")
      run_bknix_download "$BKNIX_JOB_URL" "$BKNIX_JOB_SCRIPT"
      ;;
    *)
      BKNIX_JOB_NAME=$(echo "$BKNIX_JOB_NAME" | cut -d '/' -f 1)
      BKNIX_JOB_SCRIPT="$BKNIX_JOBS/$BKNIX_JOB_NAME.job"
      ;;
  esac
  export BKNIX_JOB_SCRIPT BKNIX_JOB_NAME

  if [ ! -e "$BKNIX_JOB_SCRIPT" ]; then
    run_bknix_fatal "Missing or invalid JOB_NAME. No such file \"$BKNIX_JOB_SCRIPT\"."
  fi

  ## If there's a redeploy while bash is running, then bash gets stupid. Prefer to run bash scripts in temp files.
  local tmpfile=$(run_bknix_mktemp)
  touch "$tmpfile"
  RUN_BKNIX_CLEANUP_FILES+=("$tmpfile")
  cat "$BKNIX_JOBS/common.sh" >> $tmpfile
  echo >> $tmpfile
  cat "$BKNIX_JOB_SCRIPT" >> $tmpfile
  source "$tmpfile"
}

## usage: run_bknix_download <url> <out-file>
function run_bknix_download() {
  if which wget >> /dev/null ; then
    wget -O "$2" "$1"
  elif which curl >> /dev/null ; then
    curl -L -o "$2" "$1"
  else
    echo "error: failed to locate curl or wget"
  fi
}

run_bknix_main "$@"
